"""
Django settings for news_paper project.

Generated by 'django-admin startproject' using Django 3.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rm+8**+0nf&szdzmeu&if^3^60r68p*@=iu4=(11!n=#j*c*(@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # что бы различать сайты
    'django.contrib.sites',

    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # подключение провайдеров
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',

    'newapp',
]

SITE_ID = 1  # номер сайта для django.contrib.sites

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # учётная запись от allauth
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'news_paper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_paper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/accounts/login/'  # ссылка на страницу аутентификации
LOGIN_REDIRECT_URL = '/'  # сссылка перенаправления после аутентификации

AUTHENTICATION_BACKENDS = [
    # вход в систему по имени пользователя независимо от `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # специальные методы аутентификации `allauth`,
    # такие как вход по электронной почте.
    'allauth.account.auth_backends.AuthenticationBackend',
]
"""
Authentication backends — это компоненты, которые определяют, каким образом 
происходит проверка учётных данных пользователя.

В Django можно использовать несколько бэкендов аутентификации одновременно. 
Если стандартные методы аутентификации не удовлетворяют требования разработчика, 
можно написать собственный бэкенд. Для этого нужно создать класс, который 
наследует от django.contrib.auth.backends.BaseBackend и реализует методы 
authenticate (для проверки учётных данных) и get_user (для получения объекта 
пользователя).
"""
# переключение на аутентификацию по эл.почте
ACCOUNT_EMAIL_REQUIRED = True  # поле эл.почты не может быть пустой
ACCOUNT_UNIQUE_EMAIL = True  # поле эл.почты должно быть уникальным
ACCOUNT_USERNAME_REQUIRED = False  # поле username не обязательно
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # аутентификация по эл.почте
ACCOUNT_EMAIL_VERIFICATION = 'none'  # проверка эл.почты пока отключена
ACCOUNT_FORMS = {'signup': 'newapp.models.BasicSignupForm'}  # переназначается формы регистрации

# настройка отправки писем по эл.почте
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = open('G:/Python_projects/all_secret_codes_are_here/Yandex email/login.txt').read()
EMAIL_HOST_PASSWORD = open('G:/Python_projects/all_secret_codes_are_here/Yandex email/password.txt').read()
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = open('G:/Python_projects/all_secret_codes_are_here/Yandex email/email.txt').read()
